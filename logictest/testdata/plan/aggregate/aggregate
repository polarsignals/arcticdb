createtable schema=default
----

# It might be a bit surprising that the hash aggregate is planned in this case but this is expected, since we're only
# grouping by one concrete column of the dynamic column schema. Consider, for example, if there was another column,
# labels.label0 that sorted physically before labels.label1.
exec
explain select sum(value) as value_sum group by (example_type, labels.label1)
----
TableScan [concurrent] - HashAggregate (value_sum by example_type,labels.label1) - Synchronizer - HashAggregate (value_sum by example_type,labels.label1)

# An ordered aggregation should be planned in this case because the full set of dynamic columns is specified.
exec
explain select sum(value) as value_sum group by (example_type, labels)
----
TableScan [concurrent] - OrderedAggregate (value by example_type,labels) - OrderedSynchronizer - OrderedAggregate (value by example_type,labels)

# A hash aggregation is planned in the case that the group by columns are inverted. TODO(asubiotto): We could probably
# plan an ordered aggregation in this case, but let's not do so unless necessary.
exec
explain select sum(value) as value_sum group by (labels, example_type)
----
TableScan [concurrent] - HashAggregate (value_sum by labels,example_type) - Synchronizer - HashAggregate (value_sum by labels,example_type)

# A hash aggregation should be planned in this case because we are not grouping by example_type, so the group by columns
# are not a prefix of the sorting columns.
exec
explain select sum(value) as value_sum group by (labels)
----
TableScan [concurrent] - HashAggregate (value_sum by labels) - Synchronizer - HashAggregate (value_sum by labels)

# If however, the prefix that is not contained by the grouping columns is covered by an equality filter, an ordered
# aggregation can be planned since we "fix" a prefix of the sorting columns to a given value.
exec
explain select sum(value) as value_sum where example_type = 'some_value' group by (labels)
----
TableScan [concurrent] - PredicateFilter (example_type == some_value) - OrderedAggregate (value by labels) - OrderedSynchronizer - OrderedAggregate (value by labels)

exec
explain select sum(value) as value_sum where example_type = 'some_value' group by (labels, timestamp)
----
TableScan [concurrent] - PredicateFilter (example_type == some_value) - OrderedAggregate (value by labels,timestamp) - OrderedSynchronizer - OrderedAggregate (value by labels,timestamp)

# The above only applies to equality filters of course.
exec
explain select sum(value) as value_sum where example_type > 'some_value' group by (labels)
----
TableScan [concurrent] - PredicateFilter (example_type > some_value) - HashAggregate (value_sum by labels) - Synchronizer - HashAggregate (value_sum by labels)

# And here's a hash aggregation with a filter on another column.
exec
explain select sum(value) as value_sum where timestamp >= 1 group by labels.label1
----
TableScan [concurrent] - PredicateFilter (timestamp >= 1) - HashAggregate (value_sum by labels.label1) - Synchronizer - HashAggregate (value_sum by labels.label1)
